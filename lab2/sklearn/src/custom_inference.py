import time
import sys
from io import StringIO
import os
import shutil
import pickle

import argparse
import csv
import json
import joblib
import numpy as np
import pandas as pd
import boto3
import ast

titles_feature_group_name = os.environ.get("titles_feature_group_name", "")
titles_embedding_mapping_group_name = os.environ.get("titles_embedding_mapping_group_name", "")
region = os.environ.get("AWS_DEFAULT_REGION", "us-east-1")
featurestore_runtime_client = boto3.client('sagemaker-featurestore-runtime', region_name=region)

default_embeddings = [ 0.04682444408535957, -0.015219050459563732, 0.0066895075142383575, 0.01727204956114292, 0.08968541771173477, 0.016964316368103027, 0.03305261209607124, 0.04735630005598068, -0.0010172567563131452, -0.01601526513695717, -0.003697867039591074, -0.03696483373641968, -0.03446231037378311, -0.019612308591604233, 0.010735430754721165, -0.016942908987402916, 0.04935643821954727, 0.03905276954174042, -0.059923719614744186, 0.08953984081745148, 0.04171520471572876, 0.009603501297533512, 0.027987148612737656, -0.03767254203557968, -0.07312754541635513, 0.01395296398550272, 0.0031571825966238976, -0.050417687743902206, -0.029358847066760063, -0.026695705950260162, -0.04112136363983154, -0.03469349816441536, -0.04481273889541626, 0.009305592626333237, -0.033967871218919754, 0.047574590891599655, 0.06668997555971146, 0.004831822123378515, 0.09861550480127335, -0.011524369940161705, -0.018752984702587128, 0.04208396002650261, 0.008581507951021194, -0.04875612631440163, 0.03894461318850517, 0.03041924722492695, 0.07016315311193466, 0.009139327332377434, 0.02716008573770523, 0.06196185573935509, -0.004927895497530699, 0.02870592474937439, 0.0865899994969368, -0.018607763573527336, -0.018893424421548843, -0.04875507578253746, -0.01494086068123579, 0.028276197612285614, 0.011727449484169483, 0.06397103518247604, 0.01729513891041279, -0.0332154780626297, 0.014349731616675854, -0.0187872014939785, 0.04251332953572273, 0.004416123032569885, -0.031495288014411926, 0.06591924279928207, -0.030255410820245743, -0.026169955730438232, 0.10217545181512833, -0.018861757591366768, -0.041355594992637634, -0.027984997257590294, 0.041437216103076935, 0.05343237891793251, 0.0013201949186623096, 0.0008130221976898611, -0.026554472744464874, 0.044020187109708786, 0.001881214790046215, -0.04294046387076378, 0.020865943282842636, 0.016489362344145775, -0.06230305880308151, 0.08782751858234406, 0.0646655336022377, -0.09676634520292282, 0.00968460738658905, 0.026403898373246193, -0.016587378457188606, -0.010381652042269707, -0.03251757100224495, -0.05663929879665375, 0.062179084867239, 0.03747313842177391, -0.06923872977495193, -0.052399516105651855, 0.03929254040122032, -0.09738123416900635, -0.09836798906326294, -0.0084834611043334, -0.023722248151898384, 0.03750961646437645, 0.029784763231873512, 0.03331470489501953, -0.00022981478832662106, 0.0020165357273072004, 0.08838862180709839, -0.04425812512636185, -0.010891646146774292, 0.029401114210486412, 0.028018314391374588, 0.027302483096718788, 0.005144009366631508, 0.002337078098207712, 0.032386716455221176, 0.03170616552233696, 0.024934984743595123, 0.01426354143768549, -0.028856005519628525, -0.009809967130422592, 0.034536127001047134, 0.016725389286875725, 0.004731400404125452, 0.020877333357930183, 0.014584272168576717, 0.022159794345498085, 0.062282584607601166, -0.0019272081553936005, 0.07274619489908218, -0.030968893319368362, -0.03437696397304535, -0.0829351544380188, -0.010616336949169636, -0.016252141445875168, 0.00946726743131876, 0.024887211620807648, 0.028916271403431892, -0.024326706305146217, -0.039291445165872574, -0.007946757599711418, 0.026334146037697792, 0.06067732721567154, -0.1023673340678215, -0.015759076923131943, -0.019238708540797234, -0.013685375452041626, 0.020943883806467056, 0.06502597033977509, -0.05110945552587509, -0.04094862565398216, 0.007513132411986589, 0.06827233731746674, -0.043217360973358154, 0.06833092868328094, 0.0397767648100853, 0.04716566950082779, -0.05829029530286789, 0.03143136575818062, 0.0012203978840261698, 0.012021304108202457, -0.010966651141643524, -0.03901887312531471, 0.03233926743268967, 0.037379633635282516, 0.045682329684495926, 0.03023630753159523, 0.05079587921500206, -0.011723450385034084, 0.014033393934369087, -0.016286524012684822, 0.020088398829102516, 0.02359818108379841, -0.05011966824531555, -0.0821780413389206, -0.027171721681952477, 0.03518190234899521, 0.05976332351565361, -0.005835773888975382, 0.01596219651401043, 0.0032966535072773695, 0.06455937772989273, 0.054556265473365784, 0.08223256468772888, -0.011613242328166962, -0.07106667011976242, -0.0019285344751551747, -0.0327184833586216, -0.015400132164359093, 0.03975685313344002, 0.008687024004757404, 0.060613762587308884, -0.008855911903083324, 0.04265131428837776, -0.03605921193957329, -0.01903359778225422, -0.09736455231904984, -0.047961343079805374, -0.035529326647520065, -0.08672497421503067, -0.00964710395783186, 0.025367075577378273, -0.0990973636507988, -0.025242172181606293, 0.05465635657310486, -0.08187628537416458, 0.03755059093236923, -0.053617171943187714, 0.028567342087626457, 0.008603274822235107, -0.041563570499420166, -0.014501065015792847, 0.025753580033779144, -0.018748844042420387, 0.02729915641248226, 0.0687478557229042, 0.11495712399482727, -0.07814107090234756, -0.020138990134000778, -0.09031275659799576, 0.03375057503581047, 0.004062263760715723, -0.008574601262807846, 0.0028549758717417717, -0.019193867221474648, -0.046913422644138336, 0.05176111310720444, -0.01403974648565054, 0.02256993018090725, -0.05545876920223236, -0.054550718516111374, -0.04011651128530502, 0.00041683221934363246, 0.02812352031469345, -0.006059087347239256, -0.05175527557730675, 0.027103161439299583, -0.025051752105355263, -0.05423138663172722, -0.013551805168390274, 0.03988320380449295, -0.007916074246168137, -0.03805205598473549, -0.052551329135894775, -0.0030146054923534393, 0.034861646592617035, 0.06828717887401581, -0.053290583193302155, -0.07456719875335693, -0.011479095555841923, 0.05208839476108551, 0.025685206055641174, -0.046229466795921326, -0.05642584338784218, -0.008634096011519432]
n_user = 610
n_item = 9724


def input_fn(input_data, content_type):
    """Parse input data payload

    We currently only take csv input. Since we need to process both labelled
    and unlabelled data we first determine whether the label column is present
    by looking at how many columns were provided.
    """
    if content_type == 'application/json':
        data = json.loads(input_data)
        return data
    else:
        raise ValueError("{} not supported by script!".format(content_type))

        
def output_fn(prediction, accept):
    """Format prediction output

    The default accept/content-type between containers for serial inference is JSON.
    We also want to set the ContentType or mimetype as the same value as accept so the next
    container can read the response payload correctly.
    """
    user_id = int(prediction['user_id'])
    item_ids = prediction['item_id']
    one_hot_encoded_user_id = [0.0]*n_user
    one_hot_encoded_user_id[user_id] = 1.0

    instances = []
    for item_id in item_ids:
        instance = {}
        item_id = int(item_id)    
        one_hot_encoded_item_id = [0.0]*n_item
        one_hot_encoded_item_id[item_id] = 1.0
        instance['input_1'] = one_hot_encoded_user_id
        instance['input_2'] = one_hot_encoded_item_id
        instances.append(instance)

    input_vals = {
         "instances": instances
    }
    
    return input_vals


def predict_fn(input_data, model):
    """Preprocess input data

    We implement this because the default predict_fn uses .predict(), but our model is a preprocessor
    so we want to use .transform().

    The output is returned in the following order:

        rest of features either one hot encoded or standardized
    """
    input_data = json.loads(input_data)
    user_id = input_data['user_id']
    movie_id = input_data['movie_id']  

    feature_record = featurestore_runtime_client.get_record(FeatureGroupName=titles_feature_group_name,
                                                        RecordIdentifierValueAsString=str(movie_id))

    if 'Record' in feature_record:
        movie_embeddings = ast.literal_eval([ x['ValueAsString'] for x in feature_record[ 'Record'] if x['FeatureName'] == 'embeddings' ][0])
    else:
        movie_embeddings = default_embeddings

    result = model.kneighbors([movie_embeddings], return_distance=False)

    embedding_ids = result[0]
    output = { "user_id" : user_id, "item_id" :  embedding_ids[1:] }
    return output


def model_fn(model_dir):
    """Deserialize fitted model
    """
    with open(f"{model_dir}/embeddings_knn.pkl", "rb") as f:
        loaded_model = pickle.load(f)

    return loaded_model
